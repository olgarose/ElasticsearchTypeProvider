namespace ElasticsearchTypeProvider

open System.Reflection
open Microsoft.FSharp.Core.CompilerServices
open ProviderImplementation.ProvidedTypes
open Nest
open FSharp.Elasticsearch

[<TypeProvider>]
type Provider(cfg: TypeProviderConfig) as this = 
  inherit TypeProviderForNamespaces(cfg)
  let ns = "FSharp.Elasticsearch"
  let asm = Assembly.LoadFrom(cfg.RuntimeAssembly)

  let buildSearchPatterns (client: IElasticClient) =
    let patterns = ProvidedTypeDefinition(asm, ns, "IndexPatterns", Some typeof<obj>)
    let query = """{"match_phrase":{"_type":"index-pattern"}}"""
    let result = client |> SearchApi.rawQuery<KibanaIndexPattern> query ".kibana"

    let addSearchPattern pattern =
      let title = pattern.title

      // We need to uniq property names because we may have patterns producing
      // same pascal case names. For example: some-logs-* some*logs* -> SomeLogs.
      // Ideally, we can use quoted literal names, however, I can't get Mac VS to
      // dot into correct properties. It dots into IndexPatterns.(``some-logs-*``)
      // instead of IndexPatterns.``some-logs-*``. Interestingly, it only happens 
      // with types generated by type provider.
      // let name = title |> uniq NameUtils.pascal
      let property =
        ProvidedProperty(title, typeof<IndexPattern>,
          getterCode = 
            (fun _ -> 
              <@@
                IndexPattern(title) @@>))
      patterns.AddMemberDelayed(fun _ -> property)

    result.Documents |> Seq.iter(addSearchPattern)
    patterns

  let createAllTypes (root:ProvidedTypeDefinition) =
    let client = ElasticClient()
    let patterns = client |> buildSearchPatterns 
    root.AddMemberDelayed(fun _ -> ProvidedProperty("IndexPatterns", patterns, isStatic = true, getterCode = (fun _ -> <@@ () @@>)))

    [root; patterns]

  let createRootType =
    ProvidedTypeDefinition(asm, ns, "TypeProvider", Some typeof<obj>)

  do
    let root = createRootType
    this.AddNamespace(ns, (createAllTypes root))
            
[<assembly:TypeProviderAssembly()>]
do ()
